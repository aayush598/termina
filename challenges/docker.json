[
  {
    "id": "bash-1",
    "title": "Your First Script",
    "description": "Create and execute a basic bash script",
    "difficulty": "beginner",
    "level": 1,
    "scenario": "Create your first bash script that prints 'Hello, World!' to the terminal. Make the script executable and run it.",
    "expectedCommands": ["echo 'Hello, World!'", "chmod +x script.sh", "./script.sh"],
    "hints": [
      "Start with shebang: #!/bin/bash",
      "Use echo to print text",
      "Make script executable with chmod +x",
      "Run with ./script.sh"
    ],
    "xpReward": 20,
    "orderIndex": 1
  },
  {
    "id": "bash-2",
    "title": "Variables Basics",
    "description": "Learn to declare and use variables",
    "difficulty": "beginner",
    "level": 1,
    "scenario": "Create a script that declares a variable called 'name' with your name, then prints 'Hello, [name]!' using that variable.",
    "expectedCommands": ["name=\"Your Name\"", "echo \"Hello, $name!\""],
    "hints": [
      "Variable assignment: variable=value (no spaces)",
      "Reference variables with $",
      "Use double quotes for variable expansion"
    ],
    "xpReward": 25,
    "orderIndex": 2
  },
  {
    "id": "docker-1",
    "title": "Run Your First Container",
    "description": "Start a simple container",
    "difficulty": "beginner",
    "level": 1,
    "scenario": "Run a simple 'hello-world' Docker container to verify your Docker installation is working properly.",
    "expectedCommands": ["docker run hello-world"],
    "hints": [
      "Use docker run command",
      "The image name is hello-world",
      "Docker will automatically pull the image if not available locally"
    ],
    "xpReward": 25,
    "orderIndex": 3
  },
  {
    "id": "bash-3",
    "title": "User Input",
    "description": "Get input from users",
    "difficulty": "beginner",
    "level": 2,
    "scenario": "Create a script that asks for the user's name and then greets them personally.",
    "expectedCommands": ["read -p \"Enter your name: \" name", "echo \"Hello, $name!\""],
    "hints": [
      "Use read command to get input",
      "-p option allows you to prompt the user",
      "Store input in a variable"
    ],
    "xpReward": 30,
    "orderIndex": 4
  },
  {
    "id": "docker-2",
    "title": "Run Interactive Container",
    "description": "Run a container with interactive shell",
    "difficulty": "beginner",
    "level": 2,
    "scenario": "Run an Ubuntu container interactively and access its bash shell to explore the container environment.",
    "expectedCommands": ["docker run -it ubuntu bash"],
    "hints": [
      "Use -it for interactive terminal",
      "Specify the image (ubuntu) and command (bash)",
      "You'll get a shell inside the container"
    ],
    "xpReward": 30,
    "orderIndex": 5
  },
  {
    "id": "bash-4",
    "title": "Basic Arithmetic",
    "description": "Perform mathematical operations",
    "difficulty": "beginner",
    "level": 2,
    "scenario": "Create a script that adds two numbers (5 and 3) and displays the result.",
    "expectedCommands": ["echo $((5 + 3))", "result=$((5 + 3))"],
    "hints": [
      "Use $(( )) for arithmetic operations",
      "You can do: echo $((5 + 3))",
      "Or store in variable: result=$((5 + 3))"
    ],
    "xpReward": 30,
    "orderIndex": 6
  },
  {
    "id": "docker-3",
    "title": "List Containers",
    "description": "View running and stopped containers",
    "difficulty": "beginner",
    "level": 2,
    "scenario": "List all Docker containers, including stopped ones, to see what's currently on your system.",
    "expectedCommands": ["docker ps -a"],
    "hints": [
      "Use docker ps for running containers only",
      "Add -a flag to see all containers",
      "This shows container ID, image, status, and names"
    ],
    "xpReward": 25,
    "orderIndex": 7
  },
  {
    "id": "bash-5",
    "title": "If Statements",
    "description": "Learn conditional logic",
    "difficulty": "intermediate",
    "level": 3,
    "scenario": "Create a script that checks if a number (stored in variable) is greater than 10 and prints an appropriate message.",
    "expectedCommands": ["if [ $number -gt 10 ]; then", "echo \"Number is greater than 10\"", "fi"],
    "hints": [
      "Use if [ condition ]; then",
      "-gt means greater than",
      "End with fi",
      "Remember spaces around brackets"
    ],
    "xpReward": 35,
    "orderIndex": 8
  },
  {
    "id": "docker-4",
    "title": "Port Mapping",
    "description": "Map container ports to host",
    "difficulty": "intermediate",
    "level": 3,
    "scenario": "Run an Nginx web server container and map its port 80 to port 8080 on your host machine so you can access it via localhost:8080.",
    "expectedCommands": ["docker run -p 8080:80 nginx"],
    "hints": [
      "Use -p flag for port mapping",
      "Syntax is -p host_port:container_port",
      "Nginx runs on port 80 by default"
    ],
    "xpReward": 35,
    "orderIndex": 9
  },
  {
    "id": "bash-6",
    "title": "For Loops",
    "description": "Iterate over items",
    "difficulty": "intermediate",
    "level": 3,
    "scenario": "Create a script that uses a for loop to print numbers from 1 to 5.",
    "expectedCommands": ["for i in 1 2 3 4 5; do", "echo $i", "done"],
    "hints": [
      "Syntax: for variable in list; do",
      "Use echo to print each number",
      "End with done"
    ],
    "xpReward": 35,
    "orderIndex": 10
  },
  {
    "id": "docker-5",
    "title": "Detached Containers",
    "description": "Run containers in background",
    "difficulty": "intermediate",
    "level": 3,
    "scenario": "Run a Redis server container in detached mode (background) so it continues running after you exit the terminal.",
    "expectedCommands": ["docker run -d redis"],
    "hints": [
      "Use -d flag for detached mode",
      "Container will run in background",
      "You'll get back your terminal prompt"
    ],
    "xpReward": 30,
    "orderIndex": 11
  },
  {
    "id": "bash-7",
    "title": "While Loops",
    "description": "Loop while condition is true",
    "difficulty": "intermediate",
    "level": 3,
    "scenario": "Create a script that counts from 1 to 5 using a while loop.",
    "expectedCommands": ["counter=1", "while [ $counter -le 5 ]; do", "echo $counter", "((counter++))", "done"],
    "hints": [
      "Initialize counter first",
      "-le means less than or equal",
      "Use ((counter++)) to increment",
      "Don't forget to increment counter"
    ],
    "xpReward": 40,
    "orderIndex": 12
  },
  {
    "id": "docker-6",
    "title": "Container Management",
    "description": "Stop and remove containers",
    "difficulty": "intermediate",
    "level": 4,
    "scenario": "Stop a running container and then remove it to clean up your system.",
    "expectedCommands": ["docker stop container_name", "docker rm container_name"],
    "hints": [
      "Use docker stop to gracefully stop container",
      "Use docker rm to remove stopped container",
      "You can use container ID or name"
    ],
    "xpReward": 30,
    "orderIndex": 13
  },
  {
    "id": "bash-8",
    "title": "Functions",
    "description": "Create reusable code blocks",
    "difficulty": "intermediate",
    "level": 4,
    "scenario": "Create a function called 'greet' that takes a name as argument and prints 'Hello, [name]!' then call this function.",
    "expectedCommands": ["greet() {", "echo \"Hello, $1!\"", "}", "greet \"Alice\""],
    "hints": [
      "Function syntax: function_name() { commands }",
      "$1 represents first argument",
      "Call function with: function_name argument"
    ],
    "xpReward": 45,
    "orderIndex": 14
  },
  {
    "id": "docker-7",
    "title": "View Container Logs",
    "description": "Check container output and logs",
    "difficulty": "intermediate",
    "level": 4,
    "scenario": "Check the logs of a running container to see what it's outputting or debug any issues.",
    "expectedCommands": ["docker logs container_name"],
    "hints": [
      "Use docker logs command",
      "Add -f flag to follow logs in real-time",
      "Use container name or ID"
    ],
    "xpReward": 25,
    "orderIndex": 15
  },
  {
    "id": "bash-9",
    "title": "File Existence Check",
    "description": "Check if files exist",
    "difficulty": "intermediate",
    "level": 4,
    "scenario": "Create a script that checks if a file called 'data.txt' exists in the current directory and prints an appropriate message.",
    "expectedCommands": ["if [ -f \"data.txt\" ]; then", "echo \"File exists\"", "else", "echo \"File does not exist\"", "fi"],
    "hints": [
      "Use -f to check if file exists",
      "Add else clause for when file doesn't exist",
      "Remember to quote filename"
    ],
    "xpReward": 40,
    "orderIndex": 16
  },
  {
    "id": "docker-8",
    "title": "Execute Commands in Running Container",
    "description": "Run commands in existing containers",
    "difficulty": "intermediate",
    "level": 4,
    "scenario": "Execute a command inside a running container to check its environment or perform maintenance tasks.",
    "expectedCommands": ["docker exec container_name ls /app"],
    "hints": [
      "Use docker exec command",
      "Specify container name and the command to run",
      "Add -it for interactive commands"
    ],
    "xpReward": 35,
    "orderIndex": 17
  },
  {
    "id": "bash-10",
    "title": "Command Line Arguments",
    "description": "Handle script arguments",
    "difficulty": "intermediate",
    "level": 4,
    "scenario": "Create a script that takes a filename as command line argument and displays its contents.",
    "expectedCommands": ["cat \"$1\"", "filename=$1", "cat \"$filename\""],
    "hints": [
      "$1 is the first argument",
      "Always quote variables: \"$1\"",
      "Use cat to display file contents"
    ],
    "xpReward": 45,
    "orderIndex": 18
  },
  {
    "id": "docker-9",
    "title": "List Docker Images",
    "description": "View downloaded images",
    "difficulty": "beginner",
    "level": 3,
    "scenario": "List all Docker images currently downloaded on your system to see what's available for running containers.",
    "expectedCommands": ["docker images"],
    "hints": [
      "Use docker images or docker image ls",
      "Shows repository, tag, image ID, and size",
      "Images are templates for containers"
    ],
    "xpReward": 20,
    "orderIndex": 19
  },
  {
    "id": "bash-11",
    "title": "String Comparison",
    "description": "Compare strings in conditions",
    "difficulty": "advanced",
    "level": 5,
    "scenario": "Create a script that checks if two strings are equal and prints whether they match or not.",
    "expectedCommands": ["if [ \"$str1\" = \"$str2\" ]; then", "echo \"Strings are equal\"", "else", "echo \"Strings are different\"", "fi"],
    "hints": [
      "Use = for string comparison",
      "Remember spaces around =",
      "Quote variables to handle spaces"
    ],
    "xpReward": 50,
    "orderIndex": 20
  },
  {
    "id": "docker-10",
    "title": "Remove Docker Images",
    "description": "Clean up unused images",
    "difficulty": "intermediate",
    "level": 5,
    "scenario": "Remove a Docker image from your system to free up disk space when it's no longer needed.",
    "expectedCommands": ["docker rmi image_name"],
    "hints": [
      "Use docker rmi command",
      "You need to remove containers using the image first",
      "Use image ID or repository:tag"
    ],
    "xpReward": 30,
    "orderIndex": 21
  },
  {
    "id": "bash-12",
    "title": "Array Basics",
    "description": "Work with arrays",
    "difficulty": "advanced",
    "level": 5,
    "scenario": "Create a script that defines an array of fruits and prints each fruit on a new line.",
    "expectedCommands": ["fruits=(\"apple\" \"banana\" \"orange\")", "for fruit in \"${fruits[@]}\"; do", "echo \"$fruit\"", "done"],
    "hints": [
      "Array syntax: array=(item1 item2 item3)",
      "Use ${array[@]} to get all elements",
      "Quote \"${fruits[@]}\" to handle spaces"
    ],
    "xpReward": 55,
    "orderIndex": 22
  },
  {
    "id": "docker-11",
    "title": "Container Inspection",
    "description": "Get detailed container information",
    "difficulty": "advanced",
    "level": 5,
    "scenario": "Inspect a Docker container to see its detailed configuration, network settings, and mounted volumes.",
    "expectedCommands": ["docker inspect container_name"],
    "hints": [
      "Use docker inspect command",
      "Output is in JSON format",
      "Shows all container details and configuration"
    ],
    "xpReward": 35,
    "orderIndex": 23
  },
  {
    "id": "bash-13",
    "title": "Case Statements",
    "description": "Use switch-like statements",
    "difficulty": "advanced",
    "level": 5,
    "scenario": "Create a script that uses a case statement to handle different menu options (1: List files, 2: Show date, 3: Exit).",
    "expectedCommands": ["case $option in", "1) ls ;;", "2) date ;;", "3) exit ;;", "*) echo \"Invalid option\" ;;", "esac"],
    "hints": [
      "Start with case $variable in",
      "Each pattern ends with )",
      "Commands end with ;;",
      "End with esac",
      "* ) handles default case"
    ],
    "xpReward": 60,
    "orderIndex": 24
  },
  {
    "id": "docker-12",
    "title": "Volume Management",
    "description": "Create and use persistent volumes",
    "difficulty": "advanced",
    "level": 6,
    "scenario": "Create a Docker volume and run a container that uses this volume to persist data even after the container is removed.",
    "expectedCommands": ["docker volume create my_volume", "docker run -v my_volume:/data ubuntu"],
    "hints": [
      "Use docker volume create first",
      "Mount with -v volume_name:container_path",
      "Data in /data will persist across container restarts"
    ],
    "xpReward": 45,
    "orderIndex": 25
  },
  {
    "id": "bash-14",
    "title": "File Operations",
    "description": "Read and process files",
    "difficulty": "advanced",
    "level": 6,
    "scenario": "Create a script that reads a file line by line and prints each line with a line number.",
    "expectedCommands": ["line_number=1", "while IFS= read -r line; do", "echo \"$line_number: $line\"", "((line_number++))", "done < \"filename\""],
    "hints": [
      "Use while IFS= read -r line",
      "IFS= preserves leading/trailing whitespace",
      "-r prevents backslash interpretation",
      "Use < to redirect file input"
    ],
    "xpReward": 65,
    "orderIndex": 26
  },
  {
    "id": "docker-13",
    "title": "Docker System Cleanup",
    "description": "Clean up unused Docker resources",
    "difficulty": "advanced",
    "level": 6,
    "scenario": "Clean up your Docker system by removing all stopped containers, unused networks, and dangling images to free up disk space.",
    "expectedCommands": ["docker system prune"],
    "hints": [
      "Use docker system prune",
      "Add -a to remove all unused images",
      "Add -f to force without confirmation"
    ],
    "xpReward": 40,
    "orderIndex": 27
  },
  {
    "id": "bash-15",
    "title": "Error Handling",
    "description": "Handle errors and exit codes",
    "difficulty": "advanced",
    "level": 6,
    "scenario": "Create a script that tries to create a directory and handles the case if it fails (already exists).",
    "expectedCommands": ["if mkdir \"new_dir\"; then", "echo \"Directory created\"", "else", "echo \"Failed to create directory\"", "exit 1", "fi"],
    "hints": [
      "Commands return exit codes (0 = success)",
      "Use if command; then to check success",
      "exit 1 indicates error",
      "mkdir fails if directory exists"
    ],
    "xpReward": 70,
    "orderIndex": 28
  },
  {
    "id": "docker-14",
    "title": "Dockerfile Build",
    "description": "Build custom Docker images",
    "difficulty": "advanced",
    "level": 6,
    "scenario": "Build a custom Docker image from a Dockerfile in the current directory and tag it with a meaningful name.",
    "expectedCommands": ["docker build -t my-app ."],
    "hints": [
      "Use docker build command",
      "-t flag tags the image with a name"  ,
      ". specifies current directory as build context"
    ],
    "xpReward": 50,
    "orderIndex": 29
  }
]